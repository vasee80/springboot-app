/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 09 05:52:50 GMT 2017
 */

package com.varsh.tech.springboot.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.varsh.tech.springboot.model.User;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class User_ESTest extends User_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      User user0 = new User(49L, "]g1vlfILkH&?5;u69D", (-1627), 49L);
      user0.setId((-1627));
      User user1 = new User();
      boolean boolean0 = user0.equals(user1);
      assertEquals((-1627L), user0.getId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      User user0 = new User();
      user0.setId((-30L));
      user0.hashCode();
      assertEquals((-30L), user0.getId());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      User user0 = new User();
      user0.getSalary();
      assertEquals(0L, user0.getId());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      User user0 = new User(49L, "]g1vlfILkH&?5;u69D", (-1627), 49L);
      double double0 = user0.getSalary();
      assertEquals((-1627), user0.getAge());
      assertEquals(49L, user0.getId());
      assertEquals(49.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      User user0 = new User();
      user0.getName();
      assertEquals(0L, user0.getId());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      User user0 = new User(49L, "]g1vlfILkH&?5;u69D", (-1627), 49L);
      user0.getName();
      assertEquals(49.0, user0.getSalary(), 0.01);
      assertEquals(49L, user0.getId());
      assertEquals((-1627), user0.getAge());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      User user0 = new User();
      assertEquals(0L, user0.getId());
      
      user0.setId((-1L));
      long long0 = user0.getId();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      User user0 = new User(0L, "2v9]4eTz?", 2763, 0L);
      int int0 = user0.getAge();
      assertEquals(2763, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      User user0 = new User(49L, "]g1vlfILkH&?5;u69D", (-1627), 49L);
      int int0 = user0.getAge();
      assertEquals((-1627), int0);
      assertEquals(49.0, user0.getSalary(), 0.01);
      assertEquals(49L, user0.getId());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      User user0 = new User();
      User user1 = new User();
      boolean boolean0 = user0.equals(user1);
      assertEquals(0L, user1.getId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      User user0 = new User(49L, "]g1vlfILkH&?5;u69D", (-1627), 49L);
      boolean boolean0 = user0.equals("]g1vlfILkH&?5;u69D");
      assertEquals(49L, user0.getId());
      assertEquals((-1627), user0.getAge());
      assertFalse(boolean0);
      assertEquals(49.0, user0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = user0.equals((Object) null);
      assertEquals(0L, user0.getId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      User user0 = new User();
      boolean boolean0 = user0.equals(user0);
      assertTrue(boolean0);
      assertEquals(0L, user0.getId());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      User user0 = new User();
      User user1 = new User();
      user1.setId((-2814L));
      boolean boolean0 = user0.equals(user1);
      assertEquals((-2814L), user1.getId());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      User user0 = new User();
      int int0 = user0.getAge();
      assertEquals(0, int0);
      assertEquals(0L, user0.getId());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      User user0 = new User();
      user0.setAge(1599);
      assertEquals(1599, user0.getAge());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      User user0 = new User();
      user0.setSalary(1599L);
      assertEquals(1599.0, user0.getSalary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      User user0 = new User();
      user0.setId(1599);
      long long0 = user0.getId();
      assertEquals(1599L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      User user0 = new User();
      long long0 = user0.getId();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      User user0 = new User();
      String string0 = user0.toString();
      assertEquals("User [id=0, name=null, age=0, salary=0.0]", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      User user0 = new User();
      user0.setName((String) null);
      assertEquals(0L, user0.getId());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      User user0 = new User((-454L), "]", 0, (-454L));
      double double0 = user0.getSalary();
      assertEquals(0, user0.getAge());
      assertEquals((-454L), user0.getId());
      assertEquals((-454.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      User user0 = new User(0L, "", 1999, 0L);
      user0.getName();
      assertEquals(1999, user0.getAge());
  }
}
